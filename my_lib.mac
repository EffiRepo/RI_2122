ratprint:false$
algebraic:true$
/*Semplificazione atan(tan(x))->x*/
triginverses:all$
/* Caricamento libreria per semplificazioni aggiuntive*/
load("atrig1");
/* Regole di semplificazione coseno e seno*/
/*
matchdeclare(a,lambda([x],is(x=cos)),b,symbolp,l,integerp)$
defrule(r1,a(b[l]),c[l])$
matchdeclare(d,lambda([x],is(x=sin)),f,symbolp,g,integerp)$
defrule(r2,d(f[l]),s[l])$
matchdeclare(d,lambda([x],is(x=sin)),h,symbolp,z,symbolp,u,integerp,i,integerp)$
defrule(r3,d(h[u]+z[i]),s[u+10*i])$
matchdeclare(d,lambda([x],is(x=cos)),h,symbolp,z,symbolp,u,integerp,i,integerp)$
defrule(r4,d(h[u]+z[i]),c[u+10*i])$
matchdeclare(d,lambda([x],is(x=cos)),s,symbolp,z,symbolp,r,symbolp,e,integerp,j,integerp,o,integerp)$
defrule(r5,d(s[e]+z[j]+r[o]),c[e+10*j+100*o])$
matchdeclare(d,lambda([x],is(x=sin)),c,symbolp,z,symbolp,r,symbolp,e,integerp,j,integerp,o,integerp)$
defrule(r6,d(c[e]+z[j]+r[o]),s[e+10*j+100*o])$
matchdeclare(a,lambda([x],is(x=cos)),b,symbolp)$
defrule(r7,a(b),c[b])$
matchdeclare(a,lambda([x],is(x=sin)),b,symbolp)$
defrule(r8,a(b),s[b])$
*/
/*
rename(expr,i):=block(
  if(i=0) then(return (applyb1(expr,r1,r2,r3,r4,r5,r6,r7,r8)))
  elseif(i=1)then(return (applyb1(trigexpand(expr),r1,r2,r7,r8)))
)$
*/
matchdeclare(a,lambda([x],is(x=cos)),b,lambda([x],is(subvarp(x))))$
defrule(r1,a(b),c[part(b,1)])$
matchdeclare(a,lambda([x],is(x=sin)),b,lambda([x],is(subvarp(x))))$
defrule(r2,a(b),s[part(b,1)])$

matchdeclare(a,lambda([x],is(x=sin)),b,
  lambda([x],
            if(operatorp(x,"+")) then(
              ar:args(x),
              check:true,
              for value in ar do(
              if (subvarp(value)=false) then (check:false)
              ),
              is(check)
            )else(is(false))
  )
)$
defrule(r3,a(b),s[part(b,1,1)+10*part(b,2,1)])$
matchdeclare(a,lambda([x],is(x=cos)),b,
    lambda([x],
            if(operatorp(x,"+")) then(
              ar:args(x),
              check:true,
              for value in ar do(
              if (subvarp(value)=false) then (check:false)
              ),
              is(check)
            )else(is(false))
    )
  )$
defrule(r4,a(b),c[part(b,1,1)+10*part(b,2,1)])$
matchdeclare(a,lambda([x],is(x=cos)),b,
lambda([x],
            if(operatorp(x,["+","+","+"]))
            then(
              ar:args(x),
              check:true,
              for value in ar do(
              if (subvarp(value)=false) then (check:false)
              ),
              is(check)
            )else(is(false))
))$
defrule(r14,a[b],c[100*part(b,3,1)+10*part(b,2,1)+part(b,1,1)])$
matchdeclare(a,lambda([x],is(x=sin)),b,
lambda([x],
            if(operatorp(x,["+","+","+"])) then(
              ar:args(x),
              check:true,
              for value in ar do(
              if (subvarp(value)=false) then (check:false)
              ),
              is(check)
            )else(is(false))
    )
)$
defrule(r14,a[b],s[100*part(b,3,1)+10*part(b,2,1)+part(b,1,1)])$
rename(expr,i):=block(
  return (apply2(expr,r1,r2,r3,r4,r5,r6,r7,r8))
)$
/*Funzioni per semplificare espressioni complesse*/
mySimp(expr):=block(
[res],
ratprint:false,
res:factor(fullratsimp(expand(trigreduce(expand(ratsimp(expr)))))),
return(res)
)$
simp(expr):=block(
  [res],
  res:factor(expand(trigreduce(expand(expr)))),
  return(res)
)$
/*Determinare la dimensione di una matrice*/
size(M):=[length(M), length(transpose(M))]$
/*Reimplementazione di Atan2*/
myAtan2(y,x):=block(
[s, sp, c, cp, myAtan, res],
    if y = 0 and x = 0 then
      error("Gli argomenti non possono essere entrambi zero"),
    if x = 0 and 1 = y then return(%pi/2)
    elseif x = 0 and -1 = y then return(-%pi/2),
    /*x != 0*/
    myAtan:simp(atan(y/x)), print(myAtan),
    s:sin(myAtan), sp:sin(myAtan+%pi),
    c:cos(myAtan), cp:cos(myAtan+%pi),
    /*x>0, y>0*/
    if c = x and s = y then return(myAtan)
    /*x<0, y<0*/
    elseif cp = x and sp = y then return(myAtan-%pi)
    /*x<0, y>0*/
    elseif cp = x and s = y then return(myAtan+%pi)
    /*x>0, y<0*/
    elseif c = x and sp = y then return(-myAtan)
)$
/*Prodotto Vettoriale*/
vect_prod(A,B):=block([E, M, AxB, res],
/*Verifica delle dimensioni dei vettori*/
if ((length(A) # length(B)) or (length(A) < 3)) then
   error("Inserisci due vettori lunghi uguali")
else(
   /*Definisco vettore simbolico per i versori*/
   E:matrix([e[x]],[e[y]],[e[z]]),
   /*Definisco matrice per il prodotto vettoriale*/
   M:addrow(transpose(E),transpose(A),transpose(B)),
   /*Calcolo il prodotto vettoriale. Letsimp necessario per
   coprire anche i casi di vettori simbolici assunti come paralleli*/
   AxB:mySimp(determinant(M)),
   /*Verifico se i due vettori sono paralleli*/
   if AxB = 0 then
     res: true
   else
     res: false),
 return([AxB, res])
 )$
/*Verifica della proprietà di isometria*/
isRot(R):=block(
[RT, RRT, II, sz, det],
     /*Controllo se R è quadrata ed è una matrice*/
     sz: size(R),
     if sz[1]<1 or sz[1] # sz[2] then
       error("Inserire una matrice quadrata"),
     RT: transpose(R),
     RRT:mySimp(R.RT),
     II: identfor(R),
     det: mySimp(determinant(R)),
     if RRT = II and det = 1 then
     true
     else
     false
)$
/*Matrice di Rotazione nel Piano*/
rot2(alpha):=mySimp(matrix([cos(alpha), -sin(alpha)],[sin(alpha), cos(alpha)]))$
/*Matrice di Rotazione nello Spazio*/
rot3X(theta):=mySimp(matrix([1,0,0],[0,cos(theta),-sin(theta)],[0,sin(theta),cos(theta)]))$
rot3Y(theta):=mySimp(matrix([cos(theta),0,sin(theta)],[0,1,0],[-sin(theta),0,cos(theta)]))$
rot3Z(theta):=mySimp(matrix([cos(theta),-sin(theta),0],[sin(theta),cos(theta),0],[0,0,1]))$
/*Matrice di rotazione noto asse principale ed angolo*/
rot3(a, theta):=block(
[axis:[x,y,z], R],
/*Verifico che l'asse in input sia un asse principale*/
if not(member(a, axis)) then
  error("Inserisci un asse valido")
/*Verifico che l'angolo in input sia un simbolo o scalare*/
elseif nonscalarp(theta) and not(symbolp(theta))
       and not(subvarp(theta)) then
       error("Inserisci un angolo scalare o simbolico")
       else(
/*Ritorna la matrice di rotazione corrispondente*/
         if(a = x) then return(rot3X(theta)),
         if(a = y) then return(rot3Y(theta)),
         if(a = z) then return(rot3Z(theta))
)
)$

/*Calcolo di autovalori e autovettori*/
colsimp(cs):=block(
[csimp:[], v, bool],
for v in cs do(
      bool: false,
      for i:1 thru length(v) do(
        if v[i,1] # 0 and bool = false then(
          bool: true,
          v:ratsimp(v/v[i,1])
        )
      ),
      csimp:append(csimp,[v])
),
return(csimp)
)$
myColspace(A):= block(
[sz:size(A), cs:set(), pos, i, j, col, v, zeros],
     if sz[1]#sz[2] or sz[1]=0 or sz[2]=0 then(
       error("Inserisci una matrice quadrata")
     ),
/*Determino sottoinsieme di colonne lin. indip. di A.*/
     zeros:zeromatrix(sz[1],1),
     for i:1 thru sz[1] do(
       col:simp(col(A,i)),
       if col # zeros then (cs:adjoin(col, cs))
     ),
/*Scalo le colonne per una loro componente non nulla*/
    cs:args(cs),
    return(cs)
)$
myEigens(A):=block(
[II, sII, sIImA, pA, i, j, k, sz:size(A), specSz, adj, adji, imm, ker, v, M, zeros, bool],
     if (sz[1] # sz[2]) and (sz[1] <2) then
       error("Matrice non quadrata o vettore in ingresso"),
/* definisco una matrice identità delle dimensioni di A*/
     II: identfor(A),
/*Calcolo il polinomio caratteristico di A*/
     sIImA: s*II-A,
     pA:expand(trigreduce(expand(determinant(sIImA)))),
/*Determino gli autovalori e controllo il loro numero*/
     eigs:solve(pA=0,s),
     specSz: length(eigs),
     adj:adjoint(sIImA),
     v:[],
     zeros: zeromatrix(sz[1],sz[2]),
     for i:1 thru specSz do(
       adji: subst(eigs[i], adj),
/*Se l'aggiunta è nulla l'autovettore è preso come vettore nel nucleo di (sI-A)*/
       if adji = zeros then(
         kerA:nullspace(subst(eigs[i],sIImA)),
         for j:1 thru length(kerA) do(
/*Tramite args() prendiamo una colonna linearmente indipendente*/
           v:append(v,[args(kerA)[j]])
         )
     ) else (
         immA:myColspace(adji),
/*Tramite args()[1] prendiamo una colonna linearmente indipendente*/
         v:append(v,[args(immA)[1]]))
     ),
     v:colsimp(v),
     return([map(rhs,eigs),v])
)$


/*Generare una matrice di rotazione tramite angoli nautici*/
nautRot(axList, angleList):=block(
[axis:[x, y, z], R, isAxeList, i, newAngleList:ratsimp(angleList)],
/*Controllo che l'input sia una lista di 3 elementi*/
for i:1 thru 3 do(isAxeList:member(axList[i],axis)),
if length(axList) # 3 and not(nonscalarp(axList)) and not(isAxeList) then
  error("Inserisci come lista una permutazione di [x,y,z]")
/*Verifico che l'angolo in input sia un simbolo o scalare*/
elseif nonscalarp(theta) and not(symbolp(theta))
       and not(subvarp(theta)) then
       error("Inserisci un angolo scalare o simbolico")
else(
/*Calcolo della matrice di rotazione ed applichiamo semplificazioni*/
  R:rot3(axList[1], newAngleList[1]).
    rot3(axList[2],newAngleList[2]).rot3(axList[3], newAngleList[3]),
  return(R)
)
)$
/*Generare una matrice di rotazione tramite angoli di Eulero*/
euleroRot(axList, angle):=block(
[axis:[x, y, z], R, isAxeList, i, sgn:1],
/*Controllo che l'input sia una lista di 3 elementi*/
for i:1 thru 3 do(isAxeList:member(axList[i],axis) and axList[1] = axList[3]),
if length(axList) # 3 and not(nonscalarp(axList)) and not(isAxeList) then
  error("Inserisci come lista una permutazione di [x,y,z] con il primo e il terzo parametro coincidente")
/*Verifico che l'angolo in input sia un simbolo o scalare*/
elseif nonscalarp(theta) and not(symbolp(theta))
       and not(subvarp(theta)) then
       error("Inserisci un angolo scalare o simbolico")
else(
/*Calcolo della matrice di rotazione*/
  /*x.y.-x-> z, -x.-y.x-> z*/
  if axList[1] = axis[1] and axList[2] = axis[2] then(
    R:rot3X(sgn*%pi/2).rot3Y(sgn*theta).rot3X(-sgn*%pi/2)
  ),
  /*-x.z.x -> y, x.-z.-x -> y*/
  if axList[1] = axis[1] and axList[2] = axis[3] then(
    R:rot3X(-sgn*%pi/2).rot3Z(sgn*theta).rot3X(sgn*%pi/2)
  ),
  /*-y.x.y -> z, y.-x.-y -> z*/
  if axList[1] = axis[2] and axList[2] = axis[1] then(
    R:rot3Y(-sgn*%pi/2).rot3X(sgn*theta).rot3Y(sgn*%pi/2)
  ),
  /*y.z.-y -> x, -y.-z.y -> x*/
  if axList[1] = axis[2] and axList[2] = axis[3] then(
    R:rot3Y(sgn*%pi/2).rot3Z(sgn*theta).rot3Y(-sgn*%pi/2)
  ),
  /*z.x.-z -> y, -z.-x.z -> y*/
  if axList[1] = axis[3] and axList[2] = axis[1] then(
    R:rot3Z(sgn*%pi/2).rot3X(sgn*theta).rot3Z(-sgn*%pi/2)
  ),
  /*-z.y.z -> x, z.-y.-z -> x*/
  if axList[1] = axis[3] and axList[2] = axis[2] then(
    R:rot3Z(-sgn*%pi/2).rot3Y(sgn*theta).rot3Z(sgn*%pi/2)
  )
), return(R)
)$
/*Matrice antisimmetrica*/
S(v):=block(
[row, col, sizeV, i,j, res, temp],
    [row,col]:size(v),
    sizeV:max(row, col),
    if matrixp(v) and (col = 1 or row = 1) and not(col=row) then(
    if col > row then v:transpose(v),                           
    res:zeromatrix(sizeV,sizeV),
        for i:1 thru sizeV do(
            for j:1 thru sizeV do(
                if i=j then res[i][j]:0
                elseif j>i then (
                    temp:(-1)^(j-i)*v[sizeV-remainder(i+j,sizeV)][1],
                    res[i][j]:temp,
                    res[j][i]:-temp
                )
            )
        )
    ) else error("Insert a vector"),
    return(res)
)$
/*calcolare esponenziale di matrice*/
expLaplace(A,t):=block(
[sz, II, s, sIImA, sIImAT, i, iltA],
     /*Controlliamo che la matrice inserita sia quadrata*/
     sz:size(A),
     if(sz[1]#sz[2]) then error("Matrice non Quadrata"),
     II:ident(sz[1]),
     sIImA:invert(s*II-A),
     iltA:zerofor(A),
     for i:1 thru sz[1] do(
       for j:1 thru sz[2] do(
         iltA[i,j]:ilt(sIImA[i,j],s,t)
       )
     ),
     return(iltA)
)$
expVect(A,t):=block(
[sz, V, eigVec, Vi, D, expD, res, theta],
      sz:size(A),
      if(sz[1]#sz[2]) then error("Matrix not Square"),
/*Definiamo una matrice vuota pronta a contenere vettori colonna di dimensione 3*/
      V:zeromatrix(sz[1],0),
      eigVec:myEigens(A)[2],
      /*Controlliamo la presenza di eventuali blocchi di Jordan e andiamo in recovery usando expLaplace*/
      if(length(eigVec)#3) then return(expLaplace(A,t)),
      for i:1 thru sz[1] do(
        V:addcol(V, eigVec[i])
      ),
      Vi:invert(V), 
      D:Vi.A.V,
      expD:D,
      for i:1 thru sz[1] do(
       expD[i,i]:exp(expD[i,i]*t)
      ),
      res:V.expD.Vi,
      return(mySimp(res))
)$
/*Norma di un vettore*/
normalize(v):=block(
[norm:0, u, i, sz, vv],
sz:size(v),
/*Mi assicuro che v sia un vettore colonna*/
if nonscalarp(v) and sz[2] = 1  then(
  vv:ratsimp(v),
  /*Applico una semplificazione numerica, dividendo il vettore per una sua componente non nulla, al fine di migliorare l'output*/
  norm:sqrt(transpose(vv).vv),
  u:ratsimp(vv/norm)
),
return([norm,u])
)$
/*Rodrigues*/
rodrigues(v,theta):=block(
[S,II,S2,rodr,norm,u,theta1],
/*normaliziamo il vettore*/
[norm,u]:ratsimp(normalize(v)),
/*calcoliamo l'antisimmetrica sul versore*/
 S:S(u),
 II:ident(size(v)[1]),
 S2:S.S,
 /*implementiamo la formula di rodrigues, moltiplicando l'angolo per la norma di v*/
 theta1: ratsimp(theta),
 rodr:II+S2*(1-cos(norm*theta1))+S*sin(norm*theta1),
 return((rodr))
)$
/*data una matrice verificare che è antisimmetrica*/
isAsim(S):=block(
[st, sz: size(S), sum],
if sz[1]#sz[2] then error("Inserire una matrice quadrata"),     
st: transpose(S),
if st = -S then return(true)
else return(false)                  
)$

/*Data una matrice antisimmetrica S(v) determinare il vettore v*/
getAsimVect(S):=block(
[v:zeromatrix(3,1)],
/*Verifico che la matrice è antisimmetrica*/
if isAsim(S) then(
/*Mappo le componenti della matrice antisimmetrica nel vettore*/
  v[1,1]:S[3,2],
  v[2,1]:S[1,3],
  v[3,1]:S[2,1],
  return(v)
) else (
  error("La matrice non è antisimmetrica")
)
)$
/*Prodotto vettoriale con matrice antisimmetrica*/
antiSimProduct(v,w):=block(
[S,Sw],
 S:S(v),
 Sw:S.w,
 return(Sw)
)$
/*Data una matrice antisimmetrica calcolare la matrice di rotazione corrispondente*/
rotExp(S,t):=block(
[R],
/*Verifichiamo che S sia antisimmetrica*/
if isAsim(S) then(
  R:expLaplace(S,t),
  return(R)
) else (
  error("Inserire una matrice antisimmetrica")
)
)$
/*Data matrice di rotazione calcolare asse*/
getAxis(R):=block(
[II, v, i, u, norm,c],algebraic:true,
  /*Verifichiamo che la matrice data è di rotazione*/
  if (isRot(R) = false) then (
    error("La matrice inserita non è di rotazione.")
  ) else (
    /*Calcolo autovalori e autovettori*/
    eigs:myEigens(R),
    for i:1 thru length(eigs[1]) do(
/*Cerco l'autovettore relativo all'autovalore 1. Unico per ipotesi.*/
      if eigs[1][i] = 1 then( /*scorro autovalori per trovare lambda=1*/
         v:simp(eigs[2][i]),          
         [norm, u] : ratsimp(normalize(v)),
         return([v, norm, u])
      )
    )
  )       
)$
/*Data matrice di rotazione determinare angolo*/
getAngle(R):=block(
[Rplus, Rminus, S1, S2, dim, Rt, v, c, s, norm, u, angle,cc],
        dim:size(R),
        Rt:transpose(R),
        I:ident(dim[1]),
        Rminus:trigsimp((R-Rt)/2),
        Rplus:trigsimp((R+Rt)/2-I),        
        [v, norm, u]:getAxis(R),        
        S1:S(u), s:0, c:0,
        if(isRot(R) = false) then 
        error("La matrice inserita non è di rotazione."),     
        for i:1 thru dim[1] do(
          for j:1 thru dim[2] do(
           if(S1[i][j]#0) then
             s:Rminus[i][j]/S1[i][j],
             return(s)
          )
         ),
         S2:S1.S1,
         for i:1 thru dim[1] do(
          for j:1 thru dim[2] do(
           if(S2[i][j]#0) then
             c:expand(1-Rplus[i][j]/S2[i][j]),
             return(c)
          )
         ),
        angle:simp(atan2(expand(s),expand(c))),
        return(expand(angle/norm))
)$
/*Data Matrice antisimmetrica determinare asse ed angolo*/
getRotData(R):=block(
[angle, axes],
        axes:getAxis(R),
        angle:getAngle(R),
        return([axes[1],angle])
)$
/*Parametrizzazione cayley e cayley inverso*/
cayley(S):=block(
    [cay,I,dim],
    dim:size(S),
    if isAsim(S) then(
    I:ident(dim[1]),
    cay:(I+S).invert(I-S),
    return(cay))
    else(error("La matrice non è antisimmetrica"))
)$
invCayley(R):=block([I,S,v,norm,cosTheta,sinTheta,theta,cond],
   if isRot(R) then(
     I:ident(3),
     R:ratsimp(R),
     S:mySimp(invert(R+I).(R-I)),
     v:matrix([S[3][2]],[S[1][3]],[S[2][1]]),
     norm:(v.v),
     cosTheta:trigsimp((1-norm)/(1+norm)),
     sinTheta:trigsimp((2*sqrt(norm))/(1+norm)),
     cond:sinTheta/(1+cosTheta),
     if cond>0 then (theta:trigsimp(myAtan2(sinTheta,cosTheta)))
     else (theta:trigsimp(myAtan2(-sinTheta,cosTheta))),
     return([S,theta])
   )
   else(error("La matrice non è di rotazione"))
)$
/*Procedura per il calcolo della matrice di avvitamento*/
Av(v, theta, d):=block([exp, S, dv, row, T],
S:S(v),
exp:expLaplace(S, theta),
row:matrix([0,0,0,1]),
dv:d*v,
T:addcol(exp, dv),
T:addrow(T,row),
return(trigsimp(trigrat(trigreduce(trigexpand(T)))))
)$
/*Procedura per il calcolo della matrice di avvitamento lungo x e z*/
Avz(theta,d):=block(
    [z, Av],
    z:matrix([0],[0],[1]),
    Av:Av(z,theta,d),
    return(Av)
)$

Avx(alpha,a):=block([x,Av],
x:matrix([1],[0],[0]),
Av:Av(x,alpha,a),
return(Av)
)$
    /*Procedura per il calcolo della matrice di trasformazione ij*/
Qij(thetai,di,alphai,ai):=block([Avz,Avx,Q],
Avz:Avz(thetai,di),
Avx:Avx(alphai,ai),
Q:Avz.Avx,
return(Q)
)$
/*Procedura Denavit-Hartenberg*/
DH(M):=block(
[dim, Q:ident(4), Qlist:[], idx:1, i:1, term, term1,Qm:[]],
    dim:size(M),
    /*Calcolo matrici di trasformazione*/
    for i:1 thru dim[1] do(
    Qlist:append(Qlist,[Qij(M[i][1],M[i][2],M[i][3],M[i][4])])
    ),
    while not emptyp(Qlist) do(
        if i=dim[1] then(
          idx:-1
        ),
        if (M[i][3]=0 or M[i][3] = %pi) and i#dim[1] then(
            term:pop(Qlist),
            if i=1 then Qm:append(Qm,[term]),
            if emptyp(Qlist) then(
                Q:trigreduce(Q.term)
            )
            else(
                term1:pop(Qlist),
                Q:Q.trigreduce(term.term1),
                i:i+2
            )
        )else(
                Q:Q.pop(Qlist),i:i+1
        ),
        Qm:append(Qm,[Q])
    ),
    return([Q,Qm])
)$
inerzia(j):=block(
[II],
II:matrix([x[i],0,0],
[0,y[i],0],
[0,0,z[i]]),
II:subst(j,i,II),
return(II)
)$



grad(expr):=block(
  [var:[],i,n,idx,l:0,const:[q,v,x,y,z,theta,phi,omega],J,f:[]],
  f:flatten(append(f,[expr])),
  l:length(f),
  for i:1 thru l do (
    if subvarp(f[i]) then (
          if member(part(f[i],0),const)then 
             (var:append(var,[f[i]]))
          )
    elseif member(f[i],const) then (
          if symbolp(f[i]) then(
              var:append(var,[f[i]])
          )
          elseif lowercasep(string(f[i])) then(
                 var:append(var,[f[i]])
           )
          )
  ),
  var:flatten(var),
  n: length(var),
  if n=1 and not subvarp(var[1]) then(

   if member(var[1],[q,v,x,y,z]) then(
       J:matrix([v,a])
   )
   elseif member(var[1],[theta,phi,omega]) then(
      J:matrix([omega,alpha])
   )
  )
  else(
      J:zeromatrix(n,2),
      for i:1 thru n do (
        if subvarp(var[i]) then (
          idx:part(var[i],1),
          if part(var[i],0)=q or part(var[i],0)=v then(
            J[i,1]:v[idx],
            J[i,2]:a[idx]
          )
          elseif part(var[i],0)=theta or part(var[i],0)=omega then(
            J[i,1]:omega[idx],
            J[i,2]:alpha[idx]
          )
        )
        else(
            J[i,1]:v[var[i]],
            J[i,2]:a[var[i]]
        )
      )
  ),
  return([J,var])
)$
derivate(f):=block(
  [df:0,varp:[],sizeVar:0,derivSym:zeromatrix(1,1),
   var:0,index:0,symb:0,partswitch:true,J,vars:[]],
  varp:unique(flatten([exprbreak(f,1)])),
  sizeVar:length(varp),
  for i:1 thru sizeVar do(
    if numberp(varp[i]) then varp[i]:[]
    elseif not ((subvarp(varp[i]) or symbolp(varp[i])) 
                and (part(varp[i],0)=q or part(varp[i],0)=v) 
                or part(varp[i],0)=end) then (varp[i]:[])
  ),
   varp:flatten(varp),
   derivSym:grad(varp),
   J:grad(varp)[1],
   vars:grad(varp)[2],
   sizeVar:length(vars),
   for i:1 thru sizeVar do(
       var:vars[i],
       if symbolp(var) then(
         if member(var,[omega,v]) then (df:df+diff(f,var)*J[i,2])
         elseif member(var,[q,phi,x,y,z,theta]) then
             df:df+diff(f,var)*J[i,1]
       )else(
       index:part(var,1),
       symb:part(var,0),
       if member(symb,[q,x,y,z,phi,theta]) then 
           df:df+diff(f,var)*J[i,1]
       elseif member(symb,[v,omega]) then 
           df:df+diff(f,var)*J[i,2]
       )    
  ),
  return(df)         
)$

/* NEW DERIVATIVES*/
partial(f,dir):=block([
                       dot:0,
                       index:0,
                       value:0
                       ],
                       if(subvarp(dir)) then(
                         
                         index:part(dir,1),
                         dot:diff(part(dir,0),t),
                         
                         value:diff(f,dir)*dot[index],
                         return(value)
                       )else(
                         disp(dir),
                         return(diff(f,dir)*diff(dir,t))
                       )
)$
gradef(q,t,v)$
gradef(v,t,a)$
dev(f,var):=block([symb,
                  varTograd,
                  dif:0],
          symb:listofvars(f),
          varToGrad:[],
          for s in symb do(
            if(symbolp(s) and s#L and s#D) then push(s,varToGrad)
            else if(subvarp(s) and part(s,0)#L and part(s,0)#D) then  push(s,varToGrad)
          ),
           if(var=t) then(
             for dir in varToGrad do(
                dif:dif+partial(f,dir)
             ),
             return(dif)
           )else(
             disp(var),
             return(partial(f,var))
           )
           
  
)$






baricentro(row):=block(
[bc],
bc:addrow(addcol(ident(3),transpose(row)),[0,0,0,1]),
return(bc)
)$
formaQuad(func,n):=block(
[B],
B:zeromatrix(n,n),
/*Derivoduevolte:ottengoiterminiquadraticinellevelocità*/
for k:1 thru n do(
B[k,k]:diff(func,v[k],2)),
/*Derivoiterminimisti:*/
/*ottengoiterminisopraesottoladiagonaleprincipale.*/
for i:1 thru n do(
for j:i+1 thru n do(
B[i,j]:1/2*diff(diff(func,v[j]),v[i]),
B[j,i]:B[i,j]
)
),
return(B)
)$


 matrixDot(m):=block([sizeM:size(m),dotM:zerofor(m)],
  for i:1 thru sizeM[1] do (
  for j:1 thru sizeM[2] do(
  dotM[i,j]:derivate(m[i][j])
  )
  ),
  return(dotM)
)$
Ulink(Qh,M):=block(
[g,U,d],
/*Approssimoaccelerazionegravitazionalea10m/s^2*/
g:[0,0,10],
d:submatrix(4,Qh,1,2,3),
U:-M*g.d,
return(U)
)$
Tlink(Qh,dof,M):=block(
[Tr,Tt,w,wt,II,R,Rt,Rd,Sw,result,dd,ddt],
R:submatrix(4,Qh,4),
d:submatrix(4,Qh,1,2,3),
Rd:matrixDot(R),
dd:matrixDot(d),
Sw:trigsimp(Rd.transpose(R)),
w:matrix([Sw[3][2]],[Sw[1][3]],[Sw[2][1]]),
wt:transpose(w),
dd:trigsimp(trigreduce(trigexpand(dd))),
ddt:transpose(dd),
II:inerzia(dof),
Tt:1/2*M*trigsimp(trigreduce(trigexpand(ddt.dd))),
Tr:1/2*trigsimp(trigreduce(trigexpand(wt.R.II.transpose(R).w))),
result:[Tr,Tt,II],
return(result)
)$
stampa(T,U,Ttot,Utot,dof):=block([dof:size(U)[2],Tr:T,Ur:U],
   for i:1 thru dof do(
        print("Link",i),
        print("Energica Cinetica di Rotazione:",Tr[i][1]),
        print("Energia Cinetica di Traslazione:",Tr[i][2]),
        print("Matrice di Inerzia:",Tr[i][3]),
        print("Energia Potenziale:",Ur[i]),
        print("Br:",formaQuad(Tr[i][1],dof)),
        print("Bt:",formaQuad(Tr[i][2],dof))
   ),
    print("Energia Cinetica Complessiva:",Ttot),
    print("Energia Potenziale Complessiva:",Utot)
)$
energia(tab,M,Trs,flag):=block(
  [T:[],U:[],Q:[],Qbc:[],i,rowList,Qdr:0,Ttot:0,Utot:0],
rowList:args(DH),
dof:size(rowList)[1],
[Qdr,Q]:DH(tab),
for i:1 thru size(Q)[2] do (
   Qbc:append(Qbc,[Q[i].baricentro(Trs[i])]),
   T:append(T,[Tlink(Qbc[i],i,M[i])]),
   U:append(U,[Ulink(Qbc[i],M[i])]),
   Ttot:expand(trigreduce(expand(Ttot+T[i][1]+T[i][2]))),
   Utot:expand(trigreduce(expand(Utot+U[i])))
),if flag=1 then stampa(rename(T,0),rename(U,0),rename(Ttot,0),rename(Utot,0),size(Q)[2]),
   return([Ttot,Utot])
   )$

euleroLagrange(DH,M,F,u,Trsz):=block(
    [T,U,l,dFdq,dldq,dldv,dtdldv,eq:[],solEL:[],a,v,q],
    /*T:energiacinetica,U:energiapotenzialegravitazionale*/
    /*F:attritostatico,dLdq:derivatadiLrispettoq*/
    /*dLddq:derivatadiLrispettoaqpunto,e:energia*/
    /*q:variabilidigiunto*/
    /*EL:equazionieulerolagrange*/
    [T,U]:energia(DH,M,Trsz,0),
    l:T-U,
    dof:size(DH)[1],
    for i:1 thru dof do(
    dldv:diff(l,v[i]),
    dldq:diff(l,q[i]),
    dFdv:diff(F,v[i]),
    dtdldv:derivate(dldv),
    eq:append(eq,dtdldv-dldq+dFdv-u[i]),
    solEL:append(solEL,solve(eq[i],a[i]))
    ),
    return(rename([eq,solEL],0))
)$
/********************UTILS*************************/
/*Data una espressione determinare le sue parti*/
exprbreak(expr,flag):=block(
[p, part_list:[], cond,idx:1,f:flag],
partswitch:true,
cond:atom(expr),
if scalarp(expr) and f=1 then(return(0))
elseif cond then (return(expr)) 
elseif operatorp(expr,[cos,sin]) then(p:args(expr),return(exprbreak(p,f)))
elseif (subvarp(expr) or symbolp(expr)) then (return(expr))

 else (while true do(
         p:part(expr,idx),
         if p='end then (return()),res:[exprbreak(p,f)],
        part_list:flatten(append(part_list,res)),
idx:idx+1
    ),
    return(part_list)
    )
)$
/*Ritorna le equazioni per la cinematica inversa*/
getEq(M):=block(
[x,y,z,dim:size(M),eq],
eq:[0,0,0],
if matrixp(M) and dim = [4,4] then(
  eq[1]:x-M[1,4]=0,
  eq[2]:y-M[2,4]=0,
  eq[3]:z-M[3,4]=0
) else (
  error("insert DH matrix")
),
  return(eq)
)$